{"version":3,"sources":["images/todo-illustration.jpg","components/Nav/Nav.js","components/Header.js","components/TodoItem/Priority.js","components/TodoItem/TodoItem.js","components/InputTodo.js","components/TodoContainer.js","components/pages/Impressum.js","components/pages/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","to","Header","props","hStyle","textAlign","color","src","todoImg","alt","style","width","margin","display","timeToGetBusy","marginBottom","Priority","defaultValue","onChange","this","onChangeHandler","disabled","value","React","Component","TodoItem","state","priority","e","setState","target","titleStyle","fontWeight","opacity","type","checked","completed","handleChange","id","title","onClick","deleteTodoHandler","InputTodo","useState","setTitle","correctLength","setCorrectLength","invalidChar","setInvalidChar","useEffect","console","log","action","onSubmit","preventDefault","includes","length","addTodoItem","placeholder","TodoContainer","todos","isLoading","onChangeCheckbox","updatedTodosArr","map","todo","axios","delete","then","response","filter","catch","err","error","post","data","unshift","get","params","_limit","key","Impressum","href","Contact","name","cols","rows","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ece14e0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/todo-illustration.d80fbbb9.jpg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Nav = () => {\n  return (\n    <nav className=\"active\">\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/impressum\">Impressum</Link>\n        </li>\n        <li>\n          <Link to=\"/contact\">Contact</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport todoImg from \"../images/todo-illustration.jpg\";\n\nconst Header = (props) => {\n  const hStyle = {\n    textAlign: \"center\",\n    color: \"gray\",\n  };\n  return (\n    <header className=\"active\">\n      <img\n        // src={require('../images/todo-illustration.jpg')}\n        src={todoImg}\n        alt=\"Mann checkt Liste\"\n        style={{ width: \"250px\", margin: \"auto\", display: \"block\" }}\n      />\n      <h1 style={hStyle}>The Amazing To Do App</h1>\n      {props.timeToGetBusy ? (\n        <h2 style={{ ...hStyle, marginBottom: \"30px\" }}>Time to get busy!</h2>\n      ) : null}\n      <p style={{ marginBottom: \"15px\" }}>Add, Edit or Delete a Todo Item.</p>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nclass Priority extends React.Component {\n\n    render(){\n        return(\n            <select defaultValue=\"select-priority\" onChange={ this.props.onChangeHandler }>\n                <option disabled value=\"select-priority\">\n                    select priority\n                </option>\n                <option value=\"high\">high</option>\n                <option value=\"middle\">middle</option>\n                <option value=\"low\">low</option>\n            </select>\n        );\n    }\n}\n\nexport default Priority;\n\n// select>option*4","import React, {Component} from \"react\";\n// import React, {Component, useEffect} from \"react\";\nimport './TodoItem.scss';\nimport Priority from \"./Priority\";\n\n// const completedStyle = {\n//     fontStyle: \"italic\",\n//     color: \"#d35e0f\",\n//     opacity: 0.4,\n//     textDecoration: \"line-through\",\n// };\n\n// Aufgabe\n// Wandle diese Functional Component in eine Class Component um\nclass TodoItem extends Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    state = {\n        priority:\"\"\n    }\n\n\n    onChangeHandler = (e) => {\n        // Ziel/ToDo: setze hier state priority je nachdem,\n        // was der Nutzer im Dropdown ausgew√§hlt hat\n        this.setState({priority: e.target.value} );\n        // alert('You have selected ' + e.target.value );\n    }\n\n    // will be called just before component will be removed from DOM\n    // componentWillUnmount() {\n    //     alert(\"I hope you have really done this job since now it's about to disappear forever!\")\n    // }\n\n    render() {\n        const props = this.props;\n        let titleStyle = null;\n\n        if(this.state.priority === \"high\") {\n            titleStyle = { fontWeight: \"bold\" }\n        }else if(this.state.priority === \"low\") {\n            titleStyle = {opacity: 0.7}\n        }\n\n        return (\n            <li className=\"todo-item\">\n                <input \n                    type=\"checkbox\" \n                    checked={props.completed} \n                    onChange={() => props.handleChange(props.id)}>\n                </input>\n                {<span style={{color:\"red\"}}> ! </span>}\n                {/* <span style={ props.completed ? completedStyle : null }>{props.title}</span> */}\n    \n                {/* Alternative zu inline style: css klasse verwenden */}\n                <span \n                    className={ props.completed ? \"completed-item\" : null }\n                    style={ titleStyle } \n                >\n                    {props.title}\n                </span>\n                <Priority \n                    onChangeHandler={this.onChangeHandler}\n                />\n               \n                <button \n                    onClick={ () => { props.deleteTodoHandler(props.id) } }\n                >\n                    Delete\n                </button>\n            </li>\n        )\n    }\n   \n}\n\n// const TodoItemFunctional = (props) => {\n//     const completedStyle = {\n//     fontStyle: \"italic\",\n//     color: \"#d35e0f\",\n//     opacity: 0.4,\n//     textDecoration: \"line-through\",\n//     };\n\n//     return (\n//         <li className=\"todo-item\">\n//             <input \n//                 type=\"checkbox\" \n//                 checked={props.completed} \n//                 onChange={() => props.handleChange(props.id)}>\n//             </input>\n//             {/* <span style={ props.completed ? completedStyle : null }>{props.title}</span> */}\n\n//             {/* Alternative zu inline style: css klasse verwenden */}\n//             <span className={ props.completed ? \"completed-item\" : null } >{props.title}</span>\n            \n//             <button \n//                 onClick={ () => { props.deleteTodoHandler(props.id) } }\n//             >\n//                 Delete\n//             </button>\n//         </li>\n//     )\n// }\n\nexport default TodoItem;","import React, { useState, useEffect } from 'react';\n\n\nconst InputTodo = (props) => {\n    const [title, setTitle] = useState(\"\");\n    const [correctLength, setCorrectLength] = useState(true);\n    const [invalidChar, setInvalidChar] = useState(false);\n\n    //useEffect: Hook for componentDidMount, componentDidUpdate, componentWillUnmount\n    /* More Info: https://codewithghazi.com/componentwillunmount-with-react-hooks/\n    https://www.ibrahima-ndaw.com/blog/replace-component-lifecycle-with-useEffect/ */\n    \n    useEffect( ()=>{\n        console.log(\"UseEffect Function von InputTodo triggered\")\n    });\n\n    const onChangeHandler = (e) => {\n        // console.log('Input changed', e.target);\n        setTitle(e.target.value)\n    }\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        // console.log(this.state.title);\n\n        // check if invalid character has been used\n        if(title.includes('@')) {\n            setInvalidChar(true);\n            return;\n        } else if(invalidChar === true) {\n            setInvalidChar(false);\n        }\n\n        // correct length\n        if (title.length > 3 && title.length < 25) {\n\n            props.addTodoItem(title);\n\n            setCorrectLength(true);\n            setTitle(\"\");\n\n        } else { // incorrect length\n            setCorrectLength(false);\n        }\n    }\n\n    return (\n        <>\n            <form action=\"\" onSubmit={onSubmitHandler} className=\"form\">\n                <input\n                    className=\"input-text\"\n                    type=\"text\"\n                    placeholder=\"ToDo...\"\n                    value={title}\n                    onChange={onChangeHandler}\n                />\n                <input type=\"submit\" value=\"hinzuf√ºgen\" className=\"input-submit\" />\n            </form>\n            {correctLength ?\n                null : \n                <p>Dein ToDo muss zwischen 3 und 25 Zeichen lang sein!</p>\n            }\n            { invalidChar ? \n                <p>Please don't use @ in your Todos!</p> :\n                null\n            }\n        </>\n    );\n}\n\n\n// class InputTodoClass extends Component {\n\n//     state = {\n//         title: \"\",\n//         correctLength: true\n//     };\n\n//     onChangeHandler = (e) => {\n//         // console.log('Input changed', e.target);\n//         this.setState({\n//            title: e.target.value\n//         })\n//     }\n\n//     onSubmitHandler = (e) => {\n//         e.preventDefault();\n//         // console.log(this.state.title);\n\n//         // correct length\n//         if(this.state.title.length >3 && this.state.title.length < 25 ) {\n\n//             this.props.addTodoItem(this.state.title);\n\n//             // clear title and therefore text input\n//             this.setState({\n//                 title: \"\",\n//                 correctLength: true\n//             });\n\n//         } else { // incorrect length\n//             this.setState({\n//                 correctLength: false\n//             });\n//         }\n//     }\n\n\n//     render() {\n\n//         return (\n//             <form action=\"\" onSubmit={this.onSubmitHandler} className=\"form\">\n//                 <input\n//                     className=\"input-text\"\n//                     type=\"text\" \n//                     placeholder=\"ToDo...\" \n//                     value={this.state.title}\n//                     onChange={ this.onChangeHandler }\n//                 />\n//                 <input type=\"submit\" value=\"hinzuf√ºgen\" className=\"input-submit\" />\n//                 {this.state.correctLength ? \n//                     null : \n//                     <p>Dein ToDo muss zwischen 3 und 25 Zeichen lang sein!</p>\n//                 }\n//             </form>\n//         );\n//     }\n// }\n\nexport default InputTodo;","import React from 'react';\nimport Header from \"./Header\";\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport InputTodo from \"./InputTodo\";\nimport axios from \"axios\";\n\nclass TodoContainer extends React.Component {\n\n    state = {\n        todos: [],\n        isLoading: false,\n        timeToGetBusy: false\n    }\n\n    componentDidMount() {\n        console.log('Komponente ist fertig (componentDidMount)');\n        axios.get('https://jsonplaceholder.typicode.com/todos', {\n                params: { _limit: 10 }\n            })\n            .then(\n                response => { this.setState( {todos: response.data} ) } \n            );\n        \n        // Aufgabe\n        // f√ºge die Todo von jsonplaceholder deinem state und somit deiner ToDo-Listhinzu\n    }\n\n    componentDidUpdate() {\n        console.log('component did update!')\n\n        const {todos, timeToGetBusy} = this.state;\n\n        //Aufgabe\n        /* Hat der Nutzer mehr als 10 Todos auf \n        seiner Liste, erscheint die h2 √úberschrift.\n        Hat er weniger, erscheint sie nicht\n        */\n\n        // ToDo in Future: Check length of todos which are NOT completed\n        if(todos.length > 10 && timeToGetBusy === false) {\n            this.setState( { timeToGetBusy:true } )\n        } else if(todos.length <= 10 && timeToGetBusy === true) {\n            this.setState( { timeToGetBusy:false } )\n        } else {\n            return; // Do nothing\n        }\n\n        // Further ToDo in Future: Add margin to h1 (Header Component) if timeTiGetBudy\n        // is false\n    }\n\n    onChangeCheckbox = (id) => {\n\n        const updatedTodosArr = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                todo.completed = !todo.completed;\n            }\n            return todo;\n        })\n\n        // console.log(updatedTodosArr);\n\n        this.setState( {\n            todos: updatedTodosArr\n        } );\n    }\n\n    deleteTodoHandler = (id) => {\n        console.log('delete item:', id);\n\n        this.setState( { isLoading: true} );\n        axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n        .then(response => {\n            console.log(response)\n            // Aufgabe\n            // Entferne ToDo von unserem State\n            const updatedTodosArr = this.state.todos.filter( todo => todo.id !== id );\n            this.setState( {\n                todos: updatedTodosArr,\n                isLoading: false\n            } )\n            // \"aktiviere\" geringere opacity und \"Bitte Warten\" w√§hrend des L√∂schvorgang\n        })\n        .catch(err => {\n            //extrem simples Error-Handling\n            // Mehr hierzu:https://www.intricatecloud.io/2020/03/how-to-handle-api-errors-in-your-web-app-using-axios/\n            // alert('Beim Entfernen gab es einen Fehler: ' + err.response)\n            console.error(err);\n        });\n\n\n        return;\n        // const updatedTodosArr = this.state.todos.filter( todo => todo.id !== id );\n        // console.log(updatedTodosArr); // Ziel: Array ohne das gel√∂schte Element\n\n        // //update state\n\n        // this.setState({\n        //     todos: updatedTodosArr\n        // })\n    }\n\n    addTodoItem = (title) => {\n\n        this.setState( { isLoading: true} );\n\n        axios.post('https://jsonplaceholder.typicode.com/todos', {\n            title: title,\n            completed: false\n            // no id since server generates ID for us\n        })\n        .then(response => {\n            console.log(response.data)\n            // Aufgabe: Erweitere unseren state mit dem neuen ToDo (also response.date)\n\n            // copy array from state to updatedTodosArr\n            const updatedTodosArr = [...this.state.todos];\n            // add new todo Item to updatedTodosArr on first position\n            updatedTodosArr.unshift(response.data);\n\n            //update state with updatedTodosArr\n            this.setState( {\n                todos: updatedTodosArr,\n                isLoading:false\n            } );\n        })\n        .catch(err => {\n            //extrem simples Error-Handling\n            // Mehr hierzu:https://www.intricatecloud.io/2020/03/how-to-handle-api-errors-in-your-web-app-using-axios/\n            // alert('Beim hinzuf√ºgen gab es einen Fehler: ' + err.response)\n            console.error(err);\n        });\n        // Aufgabe: F√ºge dem Axios Post Call ein simples Error-Handling hinzu\n\n\n        return;\n    //     console.log('add:', title);\n    //     // f√ºge neues toDo Item dem state hinzu\n    //     // drei Werte: id, title, completed\n    //     const newTodo = {\n    //         id: uuidv4(),\n    //         title: title,\n    //         completed: false\n    //     }\n\n    //     // copy array from state to updatedTodosArr\n    //     const updatedTodosArr = [...this.state.todos];\n    //     // add new todo Item to updatedTodosArr on first position\n    //     updatedTodosArr.unshift(newTodo);\n\n    //     //update state with updatedTodosArr\n    //     this.setState({\n    //         todos: updatedTodosArr\n    //     });\n    //     console.log(updatedTodosArr);\n     }\n    \n\n    render() {\n\n        console.log('Komponente render wird aufgerufen')\n        return (\n            <div \n                className=\"container\" \n                style={ this.state.isLoading ? {opacity: 0.3} : null }\n            >\n                <Header timeToGetBusy= { this.state.timeToGetBusy }/>\n\n                <InputTodo \n                    addTodoItem ={this.addTodoItem}\n                />\n                {this.state.isLoading ? <p>Bitte warten...</p> : null}\n                <ul>\n                    {\n                        this.state.todos.map(todo => (\n                            <TodoItem\n                                key={todo.id}\n                                id={todo.id}\n                                title={todo.title}\n                                completed={todo.completed}\n                                handleChange={this.onChangeCheckbox} \n                                deleteTodoHandler={this.deleteTodoHandler}\n                            />\n                        ))\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\n// functional component\nconst TodoContainerFunction = (props) => {\n\n    return (\n        <div>\n            <h1>Hi, ich bin der TodoContainer!</h1>\n            <p>{props.text}</p>\n        </div>);\n};\nvoid TodoContainerFunction; // Tue nichts -> vermeidet warning\n\nexport default TodoContainer;","import React from \"react\";\n\nconst Impressum = () => {\n  return (\n    <section>\n      <div className=\"Impresssum\">\n        <h1>Impressum</h1>\n        <address>Vorname Nachname Anschrift Pzl + Ort</address>\n      </div>\n      <h3>Bildernachweis</h3>\n      <a href=\"https://www.freepik.com/vectors/data\">\n        Data vector created by stories - www.freepik.com\n      </a>\n    </section>\n  );\n};\n\nexport default Impressum;\n","import React from \"react\";\n\nconst Contact = () => {\n  return (\n    <section className=\"contact\">\n      <h1>Kontakt</h1>\n      <p> Schreib mir gerne eine Nacricht!</p>\n\n      <form action=\"\">\n        <input type=\"text\" />\n        <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\n      </form>\n    </section>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Nav from \"./components/Nav/Nav\";\nimport TodoContainer from \"./components/TodoContainer\";\nimport Impressum from \"./components/pages/Impressum\";\nimport Contact from \"./components/pages/Contact\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={TodoContainer} />\n          <Route path=\"/impressum\" component={Impressum} />\n          <Route path=\"/contact\" component={Contact} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}